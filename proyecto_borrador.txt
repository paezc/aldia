Plan de Trabajo - Proyecto AlDía
1️⃣ Estructura del Proyecto
El proyecto se organizará en las siguientes carpetas:
/var/www/html/aldia
│── /public               → Archivos accesibles desde la web (CSS, JS, imágenes)
│── /views                → Archivos PHP para el frontend
│── /config               → Configuración de BD, constantes, etc.
│── /includes             → Funciones reutilizables (autenticación, conexión a BD)
│── /scraper              → Código en Python para encontrar nuevas IAs
│── /api                  → Endpoints en PHP para el frontend
│── /admin                → Panel de control (opcional en el futuro)
│── index.php             → Página principal del sitio
│── .gitignore            → Para evitar subir archivos sensibles al repo
│── README.md             → Documentación del proyecto
2️⃣ Base de Datos
La BD estará diseñada para ser escalable y flexible:
🗂️ Tabla ia_tools (Catálogo de IAs)
Campo
Tipo
Descripción
id
INT (PK)
Identificador único
nombre
VARCHAR(255)
Nombre de la IA
descripcion
TEXT
Breve descripción
url
VARCHAR(255)
Link a la IA
imagen
VARCHAR(255)
URL de la imagen
tipo
ENUM
texto, imagen, video, audio, etc.
fecha_creacion
TIMESTAMP
Fecha en que se agregó
fuente
VARCHAR(255)
Sitio desde donde se obtuvo
premium
BOOLEAN
Si es contenido VIP
🗂️ Tabla tags (Para clasificar las IAs)
Campo
Tipo
Descripción
id
INT (PK)
Identificador único
nombre
VARCHAR(50)
Nombre del tag (Ej: "chatbot", "generador de imágenes")
🗂️ Tabla ia_tags (Relación N a N entre IAs y tags)
Campo
Tipo
Descripción
ia_id
INT (FK -> ia_tools.id)
IA relacionada
tag_id
INT (FK -> tags.id)
Tag relacionado
🗂️ Tabla usuarios (Para futuras suscripciones)
Campo
Tipo
Descripción
id
INT (PK)
Identificador único
nombre
VARCHAR(255)
Nombre del usuario
email
VARCHAR(255)
Email del usuario (único)
password
VARCHAR(255)
Hash de la contraseña
rol
ENUM
usuario, admin, premium
fecha_registro
TIMESTAMP
Fecha de alta
🗂️ Tabla comentarios (Para comentarios de usuarios)
Campo
Tipo
Descripción
id
INT (PK)
Identificador único
usuario_id
INT (FK -> usuarios.id)
Usuario que comentó
ia_id
INT (FK -> ia_tools.id)
IA sobre la que se comenta
comentario
TEXT
Contenido del comentario
fecha
TIMESTAMP
Fecha del comentario
3️⃣ Backend (PHP y API para el Frontend)
    • El frontend obtendrá los datos desde una API en PHP (/api/get_ias.php).
    • El backend manejará la autenticación y futuras funciones como un panel de administración.
4️⃣ Scraper (Python)
    • Un script en Python (/scraper/scrape.py) buscará IAs en sitios confiables.
    • Guardará los datos en la BD automáticamente.
    • Lo ejecutamos cada X tiempo con un cron job.
📌 Librerías a utilizar:
    • requests → Para hacer peticiones HTTP.
    • BeautifulSoup → Para extraer información de las páginas.
    • MySQL Connector → Para interactuar con la base de datos.
5️⃣ Frontend (Minimalista y con Filtros)
    • Diseño: Tarjetas con imagen, nombre, descripción y botones.
    • Buscador: Filtrado por tipo y tags en tiempo real.
    • Framework sugerido: Bootstrap + JavaScript dinámico.
6️⃣ Monitor de Nuevas IAs
    • Mostraremos un gráfico con la cantidad de IAs agregadas por día.
    • Podemos usar Chart.js para generar la gráfica.
🚀 Próximos Pasos
✅ Definir la estructura del repositorio en GitHub. ✅ Crear la base de datos en MySQL. ✅ Hacer la API en PHP para que el frontend obtenga los datos. ✅ Empezar con el scraper en Python.

